<application>
  <component name="AppStorage">
    <histories>
      <item value="REPR OUTPUT SIZE" />
      <item value="language chinese" />
      <item value="chromeless" />
      <item value="sleep interval between calls By default, it is 0.5 second." />
      <item value="&quot;&quot;&quot;Constructor, takes a WebDriver instance and timeout in seconds. :Args: - driver - Instance of WebDriver (Ie, Firefox, Chrome or Remote) - timeout - Number of seconds before timing out - poll_frequency - sleep interval between calls By default, it is 0.5 second. - ignored_exceptions - iterable structure of exception classes ignored during calls. By default, it contains NoSuchElementException only." />
      <item value="An expectation for checking that the title contains a case-sensitive substring. title is the fragment of title expected returns True when the title matches, False otherwise" />
      <item value="An expectation for checking that the title contains a case-sensitive substring. title is the fragment of title expected return" />
      <item value="implicitly wait" />
      <item value="execute script" />
      <item value="pythontip" />
      <item value="Broken pipe" />
      <item value="No space left on device" />
      <item value="'LiveDanmuCrawler' object has no attribute 'kafak" />
      <item value="Live Video Crawler" />
      <item value="Arguments: topic (str): topic where the message will be published value (optional): message value. Must be type bytes, or be serializable to bytes via configured value_serializer. If value is None, key is required and message acts as a 'delete'. See kafka compaction documentation for more details: https://kafka.apache.org/documentation.html#compaction (compaction requires kafka &gt;= 0.8.1) partition (int, optional): optionally specify a partition. If not set, the partition will be selected using the configured 'partitioner'. key (optional): a key to associate with the message. Can be used to determine which partition to send the message to. If partition is None (and producer's partitioner config is left as default), then messages with the same key will be delivered to the same partition (but if key is None, partition is chosen randomly). Must be type bytes, or be serializable to bytes via configured key_serializer. headers (optional): a list of header key value pairs. List items are tuples of str key and bytes value. timestamp_ms (int, optional): epoch milliseconds (from Jan 1 1970 UTC) to use as the message timestamp. Defaults to current time. Returns:" />
      <item value="Kafka Producer Client" />
      <item value="(optional): a key to associate with the message. Can be used to determine which partition to send the message to. If partition is None (and producer's partitioner config is left as default), then messages with the same key will be delivered to the same partition (but if key is None, partition is chosen randomly). Must be type bytes, or be serializable to bytes via configured key_serializer." />
      <item value="classification" />
      <item value="tendentiousness" />
      <item value="pipeprofen on github | report an issue Run a bash shell command on the selected lines. Execute a bash process that pipes the selected lines as if they were an input file, same as stdin, through a custom bash shell command. The output from the process replaces the selection with stderr and stdout. Works with multiple carets by piping each selection region separately into their own process. Also works with no carets. General usage instructions Invoke with ctrl-alt-shift-x, or by selecting text and right-click the editor to show the context menu. The menu item is called Pipe selected text to bash. When no lines are selected, use the keyboard shortcut to open the bash argument window. Demo Features Remembers the last command arguments Treats output containing either stderr and stdout the same Works with multiple carets, 1 caret and no carets Bug-free on Linux and Windows Actively supported - open an issue on github Unlicensed, free public domain source Note: you must have bash in your environment's PATH. Being able to run anything in the editor and change the buffer text was heavily inspired by emacs's lisp expressions (eval-last-sexp), (eval-defun) and (eval-expression). This plugin is intended to be a drop-in replacement for the antiquated Shell Process plugin" />
      <item value="pipeprofen on github | report an issue&#10;Run a bash shell command on the selected lines. Execute a bash process that pipes the selected lines as if they were an input file, same as stdin, through a custom bash shell command. The output from the process replaces the selection with stderr and stdout. Works with multiple carets by piping each selection region separately into their own process. Also works with no carets.&#10;General usage instructions Invoke with ctrl-alt-shift-x, or by selecting text and right-click the editor to show the context menu. The menu item is called Pipe selected text to bash. When no lines are selected, use the keyboard shortcut to open the bash argument window.&#10;Demo Features&#10;Remembers the last command arguments&#10;Treats output containing either stderr and stdout the same&#10;Works with multiple carets, 1 caret and no carets&#10;Bug-free on Linux and Windows&#10;Actively supported - open an issue on github&#10;Unlicensed, free public domain source Note: you must have bash in your environment's PATH.&#10;Being able to run anything in the editor and change the buffer text was heavily inspired by emacs's lisp expressions (eval-last-sexp), (eval-defun) and (eval-expression). This plugin is intended to be a drop-in replacement for the antiquated Shell Process plugin" />
      <item value="mall plugin for formatting text blocks that represents a table delimited by pipe (|). For example, can be used to format JBehave examples table. Supported delimiters: pipe, comma, tab. When formatting, any of supported delimiters are replaced with pipe. Usage Select text in the editor or place caret inside a table and choose action &quot;Pipe Table&quot; -&gt; &quot;Format&quot; in Code menu or in editor popup menu." />
      <item value="topic where the message will be published value (optional): message value. Must be type bytes, or be serializable to bytes via configured value_serializer. If value is None, key is required and message acts as a 'delete'. See kafka compaction documentation for more details: https://kafka.apache.org/documentation.html#compaction (compaction requires kafka &gt;= 0.8.1) partition (int, optional): optionally specify a partitio" />
      <item value="stopwaitsecs" />
      <item value="&quot;&quot;&quot;Returns an iterator equivalent to map(fn, iter). Args: fn: A callable that will take as many arguments as there are passed iterables. timeout: The maximum number of seconds to wait. If None, then there is no limit on the wait time. chunksize: If greater than one, the iterables will be chopped into chunks of size chunksize and submitted to the process pool. If set to one, the items in the list will be sent one at a time. Returns: An iterator equivalent to: map(func, *iterables) but the calls may be evaluated out-of-order. Raises: TimeoutError: If the entire result iterator could not be generated before the given timeout. Exception: If fn(*args) raises for any values. &quot;&quot;&quot;" />
      <item value="wait" />
      <item value="nginx: [warn] the &quot;user&quot; directive makes sense only if the master process runs with super-user privileges, ignored in /usr/local/nginx/conf/nginx.conf:1 " />
      <item value="*4765 open() &quot;/usr/local/nginx/client_body_temp/0000001090&quot; failed (13: Permission denied), client: 192.168.125.68, server: 192.168.129.17, request: &quot;POST /douyinphone/insert HTTP/1.1&quot;, host: &quot;192.168.129.17:7171&quot; " />
      <item value="Assertion Error " />
      <item value="Assertion Error&#10;" />
      <item value=": topic where the message will be published value (optional): message value. Must be type bytes, or be serializable to bytes via configured value_serializer. If value is None, key is required and message acts as a 'delete'. See kafka compaction documentation for more details: https://kafka.apache.org/documentation.html#compaction" />
      <item value="(tuple): Specify which Kafka API version to use. If set to None, the client will attempt to infer the broker version by probing various APIs. Example: (0, 10, 2). Default: None" />
      <item value="kafka.errors.NoBrokersAvailable: NoBrokersAvailable" />
      <item value="(int, optional): epoch milliseconds (from Jan 1 1970 UTC) to use as the message timestamp. Defaults to current time." />
      <item value="Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast" />
      <item value="Adds option to disable auto-popup completions on a space to leave your already typed text as you intended. Configure it in Editor &gt; General &gt; Code Completion settings (Preferences on OS X). Disable for all languages or only for languages in a configurable list. If you want to insert a suggestion for space disabled auto-pop then either use TAB or ENTER or manually change the selected suggestion before using SPACE to insert it. Prompted by delayed auto-popup completions in Kotlin after typing var, val or null followed by a space, inserting some random function, triggering a severe bout of Touretteâ€™s as a result." />
      <item value="Adds option to disable auto-popup completions on a space to leave your already typed text as you intended.&#10;Configure it in Editor &gt; General &gt; Code Completion settings (Preferences on OS X). Disable for all languages or only for languages in a configurable list.&#10;If you want to insert a suggestion for space disabled auto-pop then either use TAB or ENTER or manually change the selected suggestion before using SPACE to insert it.&#10;Prompted by delayed auto-popup completions in Kotlin after typing var, val or null followed by a space, inserting some random function, triggering a severe bout of Touretteâ€™s as a result." />
      <item value="A universally unique identifier (UUID) generator. For example : 123e4567-e89b-12d3-a456-426655440000. You will find it in the Generate popup -&gt; Random UUID. Available actions : Random UUID Generate UUID to clipboard Generate UUID Popup Toggle UUID dashes" />
      <item value="A universally unique identifier (UUID) generator. For example : 123e4567-e89b-12d3-a456-426655440000. You will find it in the Generate popup -&gt; Random UUID. Available actions :&#10;Random UUID&#10;Generate UUID to clipboard&#10;Generate UUID Popup&#10;Toggle UUID dashes" />
      <item value="Insert random data with the press of a single key. Adds actions to insert random data into your editor, which can be useful when writing tests." />
      <item value="A collection of color themes created by Dayle Rees for all JetBrains platforms." />
      <item value="Open your Angular or AngularJS project. Make sure that you have AngularJS or Angular library files in your project (for example, in the node_modules folder) â€“ this is required for the IDE to enable Angular support for this project. Now, you will get Angular-specific code completion, navigation, and many other features." />
      <item value="Open your Angular or AngularJS project.&#10;Make sure that you have AngularJS or Angular library files in your project (for example, in the node_modules folder) â€“ this is required for the IDE to enable Angular support for this project.&#10;Now, you will get Angular-specific code completion, navigation, and many other features." />
      <item value="IntelliJ Lombok plugin GitHub | Issues | Donate ( PayPal ) A plugin that adds first-class support for Project Lombok Sponsors Discuss, review, and share code with your team in your JetBrains IDE. Integrates with Slack, Jira, Trello, Github and more. Try it free! Features" />
      <item value="Support for Node.js projects. Features Run Node.js applications from the IDE and debug them using the built-in visual debugger Profile Node.js applications from the IDE Attach debugger to the running Node.js process Run and debug Mocha tests right in the IDE Create new Express projects from the IDE Welcome screen You can also run and debug Node.js applications in the remote environments such as Docker containers, Vagrant machines and remote servers right from the IDE. For that, please install the Node.js remote interpreters plugin. Here you can find more information on working with Node.js in the IDE." />
      <item value="Support for Node.js projects.&#10;Features&#10;Run Node.js applications from the IDE and debug them using the built-in visual debugger&#10;Profile Node.js applications from the IDE&#10;Attach debugger to the running Node.js process&#10;Run and debug Mocha tests right in the IDE&#10;Create new Express projects from the IDE Welcome screen&#10;You can also run and debug Node.js applications in the remote environments such as Docker containers, Vagrant machines and remote servers right from the IDE. For that, please install the Node.js remote interpreters plugin.&#10;Here you can find more information on working with Node.js in the IDE." />
      <item value="The Table Editor is a newly introduced feature of CSV Plugin v2.*. Support its ongoing development by reporting issues, providing suggestions, contributing ideas/features or by just giving it a thumbs up. Lightweight CSV plugin that supports editing files in CSV/TSV format. Features: CSV/TSV/PSV file detection table editor customizable text editor syntax validation syntax highlighting (configurable) content formatting (configurable) quick fix inspections intentions (Alt+Enter), e.g. Quote/Unquote (all), Shift Column Left/Right structure view (header-entry layout) support for ',', ';', '|' or 'â†¹' as value separator highlight of active column values customizable column coloring tab (â†¹) separator highlighting TSV file support: TSV files are recognized as such but treated as a variant of CSV files, the same syntax highlighting and code style settings are applied. Code formatting: Default code formatting is 'Tabularize'. Can be changed in Settings -&gt; Editor -&gt; Code Style -&gt; CSV For more detailed information please have a look at the README. Thanks to @royqh1979, @egoisticalgoat, @sabi0, @ptahchiev, @ghost, @MarkJeronimus and others for supporting me and the project! IntelliJ IDEA Ultimate/PhpStorm/DataGrip/etc.: The plugin is fully compatible with the 'Edit as Table...' functionality. In IDE releases prior v2017.3, the shortcut in the editor context menu becomes invisible when using this plugin. However, the option can still be accessed via Toolbar -&gt; Edit -&gt; 'Edit as Table...'." />
      <item value="The Table Editor is a newly introduced feature of CSV Plugin v2.*. Support its ongoing development by reporting issues, providing suggestions, contributing ideas/features or by just giving it a thumbs up. Lightweight CSV plugin that supports editing files in CSV/TSV format. Features: CSV/TSV/PSV file detection&#10;table editor&#10;customizable text editor&#10;syntax validation&#10;syntax highlighting (configurable)&#10;content formatting (configurable)&#10;quick fix inspections&#10;intentions (Alt+Enter), e.g. Quote/Unquote (all), Shift Column Left/Right&#10;structure view (header-entry layout)&#10;support for ',', ';', '|' or 'â†¹' as value separator&#10;highlight of active column values&#10;customizable column coloring&#10;tab (â†¹) separator highlighting&#10;TSV file support: TSV files are recognized as such but treated as a variant of CSV files, the same syntax highlighting and code style settings are applied. Code formatting: Default code formatting is 'Tabularize'. Can be changed in Settings -&gt; Editor -&gt; Code Style -&gt; CSV For more detailed information please have a look at the README. Thanks to @royqh1979, @egoisticalgoat, @sabi0, @ptahchiev, @ghost, @MarkJeronimus and others for supporting me and the project! IntelliJ IDEA Ultimate/PhpStorm/DataGrip/etc.: The plugin is fully compatible with the 'Edit as Table...' functionality. In IDE releases prior v2017.3, the shortcut in the editor context menu becomes invisible when using this plugin. However, the option can still be accessed via Toolbar -&gt; Edit -&gt; 'Edit as Table...'." />
      <item value="Bash language support for the IntelliJ platform. Supports run configurations, syntax highlighting, rename refactoring, documentation lookup, inspections, quickfixes and much more. Do you like it? Give it a star at GitHub. Rate it at plugins.jetbrains.com. News for users of 2019.2: JetBrains is bundling a new Shell plugin with 2019.2. You shouldn't use BashSupport and Shell simultaneously. Make sure to disable one of them. BashSupport supports more advanced features. Shell is more robust and providing better integration of basic functionality. BashSupport's future: Visit bashsupport.com to learn more about this. In short: BashSupport will remain available, free, and open-source. Thanks for being part of BashSupport! It's more than 10 years now and the most popular community plugin. It's far from perfect - thanks for using it nevertheless! JetBrain's Shell plugin is likely to become the new default for developers of shell scripts. This means that there's no future for BashSupport here. Development will be limited to maintenance and fixes for serious issues. Most likely there will be a new, paid BashSupport Pro plugin in the future. It will add missing functionality on top of the JetBrains plugin." />
      <item value="Bash language support for the IntelliJ platform. Supports run configurations, syntax highlighting, rename refactoring, documentation lookup, inspections, quickfixes and much more. Do you like it? Give it a star at GitHub. Rate it at plugins.jetbrains.com. News for users of 2019.2: JetBrains is bundling a new Shell plugin with 2019.2. You shouldn't use BashSupport and Shell simultaneously. Make sure to disable one of them. BashSupport supports more advanced features. Shell is more robust and providing better integration of basic functionality. BashSupport's future: Visit bashsupport.com to learn more about this. In short:&#10;BashSupport will remain available, free, and open-source.&#10;Thanks for being part of BashSupport! It's more than 10 years now and the most popular community plugin. It's far from perfect - thanks for using it nevertheless!&#10;JetBrain's Shell plugin is likely to become the new default for developers of shell scripts. This means that there's no future for BashSupport here.&#10;Development will be limited to maintenance and fixes for serious issues.&#10;Most likely there will be a new, paid BashSupport Pro plugin in the future. It will add missing functionality on top of the JetBrains plugin." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="543" />
        <entry key="ENGLISH" value="544" />
        <entry key="DANISH" value="2" />
        <entry key="GERMAN" value="2" />
        <entry key="FRENCH" value="2" />
        <entry key="HAITIAN_CREOLE" value="3" />
        <entry key="CORSICAN" value="1" />
        <entry key="ROMANIAN" value="2" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="SWEDISH" value="6" />
        <entry key="TELUGU" value="1" />
        <entry key="TURKISH" value="1" />
        <entry key="SPANISH" value="3" />
        <entry key="HUNGARIAN" value="1" />
        <entry key="ITALIAN" value="4" />
        <entry key="HINDI" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20180726000189099" />
        <option name="appKeyConfigured" value="true" />
      </app-key>
    </option>
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="fanyi.baidu" />
  </component>
</application>