<application>
  <component name="AppStorage">
    <histories>
      <item value="libraries" />
      <item value="librar" />
      <item value="lib" />
      <item value="oriented" />
      <item value="ori" />
      <item value="simple" />
      <item value="屏幕截图" />
      <item value="init producer" />
      <item value="partitioner" />
      <item value="&quot;&quot;&quot;Returns a random partition out of all of the available partitions. Uses a non-random incrementing counter to provide even distribution across partitions without wasting CPU cycles" />
      <item value="partition key" />
      <item value=" Parameter" />
      <item value="update Prompt" />
      <item value="提示" />
      <item value="self.videoNum = 0 self.commentNum = 0" />
      <item value="区域" />
      <item value="按钮" />
      <item value="操作" />
      <item value="installing callback" />
      <item value="{u'message': u'downloading', &quot;progress&quot;: {u'totalSize': 407992690, u'copiedSize': 49152}} Returns: packageName Raises: RuntimeError" />
      <item value="offset: (xoff, yoff) default (0.5, 0.5) -&gt; center" />
      <item value="Click UI element. Args: timeout: seconds wait element show up offset: (xoff, yoff) default (0.5, 0.5) -&gt; center The click method does the same logic as java uiautomator does. 1. waitForExists 2. get VisibleBounds center 3. send click event Raises: UiObjectNotFoundError" />
      <item value="Ui Object Not Found Error" />
      <item value="INFO: Attempt 0: failed to connect to 10.10.30.136:9092" />
      <item value="Cannot assign requested address" />
      <item value="complete" />
      <item value="完成" />
      <item value="等待" />
      <item value="firefox_binary: Instance of ``FirefoxBinary`` or full path to the Firefox binary. If undefined, the system default Firefox installation will be used." />
      <item value="firefox binary" />
      <item value="Initialises a new instance of a Firefox Profile :args: - profile_directory: Directory of profile that you want to use. If a directory is passed in it will be cloned and the cloned directory will be used by the driver when instantiated. This defaults to None and will create a new directory when object is created." />
      <item value="sets the preference that we want in the profile." />
      <item value="Firefox Profile" />
      <item value="Options" />
      <item value="set window position" />
      <item value="Firefox Options" />
      <item value="Based on the combination and specificity of the various keyword arguments, a capabilities dictionary will be constructed that is passed to the remote end. The keyword arguments given to this constructor are helpers to more easily allow Firefox WebDriver sessions to be customised with different options. They are mapped on to a capabilities dictionary that is passed on to the remote end. As some of the options, such as `firefox_profile` and `options.profile` are mutually exclusive, precedence is given from how specific the setting is. `capabilities` is the least specific keyword argument, followed by `options`, followed by `firefox_binary` and `firefox_profile`. In practice this means that if `firefox_profile` and `options.profile` are both set, the selected profile instance will always come from the most specific variable. In this case that would be `firefox_profile`. This will result in `options.profile` to be ignored because it is considered a less specific setting than the top-level `firefox_profile` keyword argument. Similarily, if you had specified a `capabilities[&quot;moz:firefoxOptions&quot;][&quot;profile&quot;]` Base64 string, this would rank below `options.profile`." />
      <item value="Path for phantomjs service to log to." />
      <item value="A List of command line arguments to pass to PhantomJS" />
      <item value="Creates a new instance of the PhantomJS / Ghostdriver. Starts the service and then creates new instance of the driver. :Args: - executable_path - path to the executable. If the default is used it assumes the executable is in the $PATH - port - port you would like the service to run, if left as 0, a free port will be found. - desired_capabilities: Dictionary object with non-browser specific capabilities only, such as &quot;proxy&quot; or &quot;loggingPref&quot;. - service_args : A List of command line arguments to pass to PhantomJS - service_log_path: Path for phantomjs service to log to." />
      <item value="Canvas" />
      <item value="速度基数" />
      <item value="速度" />
      <item value="no more than 1024 processes can be spawned" />
      <item value="round" />
      <item value="TypeError: Expected cv::UMat for argument 'image'" />
      <item value=".pause( random.randint(4, 10))" />
      <item value="分开两步进行书写" />
      <item value="selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document" />
      <item value="frombuffer" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="342" />
        <entry key="ENGLISH" value="342" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="HAITIAN_CREOLE" value="3" />
        <entry key="CORSICAN" value="1" />
        <entry key="ROMANIAN" value="2" />
        <entry key="SWEDISH" value="6" />
        <entry key="TELUGU" value="1" />
        <entry key="TURKISH" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="HINDI" value="3" />
      </map>
    </option>
  </component>
</application>