<application>
  <component name="AppStorage">
    <histories>
      <item value="complete" />
      <item value="完成" />
      <item value="等待" />
      <item value="firefox_binary: Instance of ``FirefoxBinary`` or full path to the Firefox binary. If undefined, the system default Firefox installation will be used." />
      <item value="firefox binary" />
      <item value="Initialises a new instance of a Firefox Profile :args: - profile_directory: Directory of profile that you want to use. If a directory is passed in it will be cloned and the cloned directory will be used by the driver when instantiated. This defaults to None and will create a new directory when object is created." />
      <item value="sets the preference that we want in the profile." />
      <item value="Firefox Profile" />
      <item value="Options" />
      <item value="set window position" />
      <item value="Firefox Options" />
      <item value="Based on the combination and specificity of the various keyword arguments, a capabilities dictionary will be constructed that is passed to the remote end. The keyword arguments given to this constructor are helpers to more easily allow Firefox WebDriver sessions to be customised with different options. They are mapped on to a capabilities dictionary that is passed on to the remote end. As some of the options, such as `firefox_profile` and `options.profile` are mutually exclusive, precedence is given from how specific the setting is. `capabilities` is the least specific keyword argument, followed by `options`, followed by `firefox_binary` and `firefox_profile`. In practice this means that if `firefox_profile` and `options.profile` are both set, the selected profile instance will always come from the most specific variable. In this case that would be `firefox_profile`. This will result in `options.profile` to be ignored because it is considered a less specific setting than the top-level `firefox_profile` keyword argument. Similarily, if you had specified a `capabilities[&quot;moz:firefoxOptions&quot;][&quot;profile&quot;]` Base64 string, this would rank below `options.profile`." />
      <item value="Path for phantomjs service to log to." />
      <item value="A List of command line arguments to pass to PhantomJS" />
      <item value="Creates a new instance of the PhantomJS / Ghostdriver. Starts the service and then creates new instance of the driver. :Args: - executable_path - path to the executable. If the default is used it assumes the executable is in the $PATH - port - port you would like the service to run, if left as 0, a free port will be found. - desired_capabilities: Dictionary object with non-browser specific capabilities only, such as &quot;proxy&quot; or &quot;loggingPref&quot;. - service_args : A List of command line arguments to pass to PhantomJS - service_log_path: Path for phantomjs service to log to." />
      <item value="Canvas" />
      <item value="速度基数" />
      <item value="速度" />
      <item value="no more than 1024 processes can be spawned" />
      <item value="round" />
      <item value="TypeError: Expected cv::UMat for argument 'image'" />
      <item value=".pause( random.randint(4, 10))" />
      <item value="分开两步进行书写" />
      <item value="selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document" />
      <item value="frombuffer" />
      <item value="wait Key" />
      <item value="scaimg" />
      <item value="frombuffer(buffer, dtype=float, count=-1, offset=0) Interpret a buffer as a 1-dimensional array. Parameters ---------- buffer : buffer_like An object that exposes the buffer interface. dtype : data-type, optional Data-type of the returned array; default: float. count : int, optional Number of items to read. ``-1`` means all data in the buffer. offset : int, optional Start reading the buffer from this offset (in bytes); default: 0. Notes ----- If the buffer has data that is not in machine byte-order, this should be specified as part of the data-type, e.g.:: &gt;&gt;&gt; dt = np.dtype(int) &gt;&gt;&gt; dt = dt.newbyteorder('&gt;')" />
      <item value="Move mouse by using given track" />
      <item value="location" />
      <item value="diff" />
      <item value="Holds down the left mouse button on the source element, then moves to the target offset and releases the mouse button. :Args: - source: The element to mouse down. - xoffset: X offset to move to. - yoffset: Y offset to move to." />
      <item value="e element to mouse dow" />
      <item value="Releasing a held mouse button on an element. :Args: - on_element: The element to mouse up. If None, releases on current mouse position." />
      <item value="pause" />
      <item value="TypeError: 'float' object cannot be interpreted as an integer" />
      <item value="imread" />
      <item value="error: (-215:Assertion failed) !_src.empty() in function 'cv::cvtColor" />
      <item value="reset actions" />
      <item value="Safe Rotating" />
      <item value="delay" />
      <item value="content has" />
      <item value="content xj placename" />
      <item value="place" />
      <item value="get window rect" />
      <item value="get window size" />
      <item value="window Handle" />
      <item value="Sets the width and height of the current window. (window.resizeTo)" />
      <item value="get screenshot as png" />
      <item value="Saves a screenshot of the current window to a PNG image file. Returns False if there is any IOError, else returns True. Use full paths in your filename. :Args: - filename: The full path you wish to save your screenshot to. This should end with a `.png` extension. :Usage: driver.save_screenshot('/Screenshots/foo.png')" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="331" />
        <entry key="ENGLISH" value="331" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="HAITIAN_CREOLE" value="3" />
        <entry key="CORSICAN" value="1" />
        <entry key="ROMANIAN" value="2" />
        <entry key="SWEDISH" value="4" />
        <entry key="TELUGU" value="1" />
        <entry key="TURKISH" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="HINDI" value="3" />
      </map>
    </option>
  </component>
</application>