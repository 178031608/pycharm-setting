<application>
  <component name="AppStorage">
    <histories>
      <item value="content has" />
      <item value="content xj placename" />
      <item value="place" />
      <item value="get window rect" />
      <item value="set window position" />
      <item value="get window size" />
      <item value="window Handle" />
      <item value="Sets the width and height of the current window. (window.resizeTo)" />
      <item value="get screenshot as png" />
      <item value="Saves a screenshot of the current window to a PNG image file. Returns False if there is any IOError, else returns True. Use full paths in your filename. :Args: - filename: The full path you wish to save your screenshot to. This should end with a `.png` extension. :Usage: driver.save_screenshot('/Screenshots/foo.png')" />
      <item value="save screenshot" />
      <item value="Saves a screenshot of the current window to a PNG image file. Returns False if there is any IOError, else returns True. Use full paths in your filename. :Args: - filename: The full path you wish to save your screenshot to. This should end with a `.png` extension. :Usage: driver.get_screenshot_as_file('/Screenshots/foo.png')" />
      <item value="returns the drivers current desired capabilities being used" />
      <item value="desired capabilities" />
      <item value="find elements" />
      <item value="find element" />
      <item value="set page load timeout" />
      <item value="set script timeout" />
      <item value="implicitly wait" />
      <item value="Adds a cookie to your current session. :Args: - cookie_dict: A dictionary object, with required keys - &quot;name&quot; and &quot;value&quot;; optional keys - &quot;path&quot;, &quot;domain&quot;, &quot;secure&quot;, &quot;expiry&quot; Usage: driver.add_cookie({'name' : 'foo', 'value' : 'bar'}) driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'}) driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})" />
      <item value="Get a single cookie by name. Returns the cookie if found, None if not. :Usage: driver.get_cookie('my_cookie')" />
      <item value="Returns a set of dictionaries, corresponding to cookies visible in the current session. :Usage: driver.get_cookies()" />
      <item value="refresh" />
      <item value="switch to default content" />
      <item value="switch to alert" />
      <item value="Deprecated use driver.switch_to.default_content" />
      <item value="Deprecated use driver.switch_to.frame" />
      <item value="eprecated use driver.switch_to.frame" />
      <item value="switch to frame" />
      <item value="switch to active element" />
      <item value="switch to window" />
      <item value=":Returns: - SwitchTo: an object containing all options to switch focus into :Usage: element = driver.switch_to.active_element alert = driver.switch_to.alert driver.switch_to.default_content() driver.switch_to.frame('frame_name') driver.switch_to.frame(1) driver.switch_to.frame(driver.find_elements_by_tag_name(&quot;iframe&quot;)[0]) driver.switch_to.parent_frame() driver.switch_to.window('main')" />
      <item value="switch to" />
      <item value="fullscreen window" />
      <item value="Invokes the window manager-specific 'minimize' operation" />
      <item value="ends a command to be executed by a command.CommandExecutor. :Args: - driver_command: The name of the command to execute as a string. - params: A dictionary of named parameters to send with the command. :Returns: The command's JSON response loaded into a dictionary object." />
      <item value="install addon" />
      <item value="Class for Pack or Unpack tracker header struct tracker_header{ char pkg_len[FDFS_PROTO_PKG_LEN_SIZE], char cmd, char status, }" />
      <item value="Create a compiled struct object. Return a new Struct object which writes and reads binary data according to the format string. See help(struct) for more on format strings." />
      <item value="Return a tuple containing unpacked values. Unpack according to the format string Struct.format. The buffer's size in bytes must be Struct.size. See help(struct) for more on format strings. &quot;&quot;&quot;" />
      <item value="Return a tuple containing unpacked values. Unpack according to the format string Struct.format. The buffer's size in bytes must be Struct.size. See help(struct) for more on format strings." />
      <item value="Synchronously Executes JavaScript in the current window/frame. :Args: - script: The JavaScript to execute. - \*args: Any applicable arguments for your JavaScript. :Usage: driver.execute_script('return document.title;')" />
      <item value="Finds an element by link text. :Args: - link_text: The text of the element to be found. :Returns: - WebElement - the element if it was found :Raises: - NoSuchElementException - if the element wasn't found :Usage: element = driver.find_element_by_link_text('Sign In')" />
      <item value="Sends a command to be executed by a command.CommandExecutor. :Args: - driver_command: The name of the command to execute as a string. - params: A dictionary of named parameters to send with the command. :Returns: The command's JSON response loaded into a dictionary object." />
      <item value="reates a web element with the specified `element_id`" />
      <item value="Creates a new session with the desired capabilities. :Args: - browser_name - The name of the browser to request. - version - Which browser version to request. - platform - Which platform to request the browser on. - javascript_enabled - Whether the new session should support JavaScript. - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested." />
      <item value="Create a new driver that will issue commands using the wire protocol. :Args: - command_executor - Either a string representing URL of the remote server or a custom remote_connection.RemoteConnection object. Defaults to 'http://127.0.0.1:4444/wd/hub'. - desired_capabilities - A dictionary of capabilities to request when starting the browser session. Required parameter. - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested. Optional. - proxy - A selenium.webdriver.common.proxy.Proxy object. The browser session will be started with given proxy settings, if possible. Optional. - keep_alive - Whether to configure remote_connection.RemoteConnection to use HTTP keep-alive. Defaults to False. - file_detector - Pass custom file detector object during instantiation. If None, then default LocalFileDetector() will be used. - options - instance of a driver options.Options class" />
      <item value="Controls a browser by sending commands to a remote server. This server is expected to be running the WebDriver wire protocol as defined at https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol :Attributes: - session_id - String ID of the browser session started and controlled by this WebDriver. - capabilities - Dictionaty of effective capabilities of this browser session as returned by the remote server. See https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities - command_executor - remote_connection.RemoteConnection object used to execute commands. - error_handler - errorhandler.ErrorHandler object used to handle errors." />
      <item value="Installs Firefox addon. Returns identifier of installed addon. This identifier can later be used to uninstall addon. :param path: Absolute path to the addon that will be installed. :Usage: driver.install_addon('/path/to/firebug.xpi')" />
      <item value="execute cdp cmd" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="291" />
        <entry key="ENGLISH" value="292" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="HAITIAN_CREOLE" value="3" />
        <entry key="ROMANIAN" value="2" />
        <entry key="SWEDISH" value="4" />
        <entry key="TELUGU" value="1" />
        <entry key="TURKISH" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="HINDI" value="2" />
      </map>
    </option>
  </component>
</application>