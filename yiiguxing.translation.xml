<application>
  <component name="AppStorage">
    <histories>
      <item value="location" />
      <item value="diff" />
      <item value="Holds down the left mouse button on the source element, then moves to the target offset and releases the mouse button. :Args: - source: The element to mouse down. - xoffset: X offset to move to. - yoffset: Y offset to move to." />
      <item value="e element to mouse dow" />
      <item value="Releasing a held mouse button on an element. :Args: - on_element: The element to mouse up. If None, releases on current mouse position." />
      <item value="pause" />
      <item value="TypeError: 'float' object cannot be interpreted as an integer" />
      <item value="imread" />
      <item value="error: (-215:Assertion failed) !_src.empty() in function 'cv::cvtColor" />
      <item value="reset actions" />
      <item value="Safe Rotating" />
      <item value="delay" />
      <item value="content has" />
      <item value="content xj placename" />
      <item value="place" />
      <item value="get window rect" />
      <item value="set window position" />
      <item value="get window size" />
      <item value="window Handle" />
      <item value="Sets the width and height of the current window. (window.resizeTo)" />
      <item value="get screenshot as png" />
      <item value="Saves a screenshot of the current window to a PNG image file. Returns False if there is any IOError, else returns True. Use full paths in your filename. :Args: - filename: The full path you wish to save your screenshot to. This should end with a `.png` extension. :Usage: driver.save_screenshot('/Screenshots/foo.png')" />
      <item value="save screenshot" />
      <item value="Saves a screenshot of the current window to a PNG image file. Returns False if there is any IOError, else returns True. Use full paths in your filename. :Args: - filename: The full path you wish to save your screenshot to. This should end with a `.png` extension. :Usage: driver.get_screenshot_as_file('/Screenshots/foo.png')" />
      <item value="returns the drivers current desired capabilities being used" />
      <item value="desired capabilities" />
      <item value="find elements" />
      <item value="find element" />
      <item value="set page load timeout" />
      <item value="set script timeout" />
      <item value="implicitly wait" />
      <item value="Adds a cookie to your current session. :Args: - cookie_dict: A dictionary object, with required keys - &quot;name&quot; and &quot;value&quot;; optional keys - &quot;path&quot;, &quot;domain&quot;, &quot;secure&quot;, &quot;expiry&quot; Usage: driver.add_cookie({'name' : 'foo', 'value' : 'bar'}) driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'}) driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})" />
      <item value="Get a single cookie by name. Returns the cookie if found, None if not. :Usage: driver.get_cookie('my_cookie')" />
      <item value="Returns a set of dictionaries, corresponding to cookies visible in the current session. :Usage: driver.get_cookies()" />
      <item value="refresh" />
      <item value="switch to default content" />
      <item value="switch to alert" />
      <item value="Deprecated use driver.switch_to.default_content" />
      <item value="Deprecated use driver.switch_to.frame" />
      <item value="eprecated use driver.switch_to.frame" />
      <item value="switch to frame" />
      <item value="switch to active element" />
      <item value="switch to window" />
      <item value=":Returns: - SwitchTo: an object containing all options to switch focus into :Usage: element = driver.switch_to.active_element alert = driver.switch_to.alert driver.switch_to.default_content() driver.switch_to.frame('frame_name') driver.switch_to.frame(1) driver.switch_to.frame(driver.find_elements_by_tag_name(&quot;iframe&quot;)[0]) driver.switch_to.parent_frame() driver.switch_to.window('main')" />
      <item value="switch to" />
      <item value="fullscreen window" />
      <item value="Invokes the window manager-specific 'minimize' operation" />
      <item value="ends a command to be executed by a command.CommandExecutor. :Args: - driver_command: The name of the command to execute as a string. - params: A dictionary of named parameters to send with the command. :Returns: The command's JSON response loaded into a dictionary object." />
      <item value="install addon" />
      <item value="Class for Pack or Unpack tracker header struct tracker_header{ char pkg_len[FDFS_PROTO_PKG_LEN_SIZE], char cmd, char status, }" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="304" />
        <entry key="ENGLISH" value="305" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="HAITIAN_CREOLE" value="3" />
        <entry key="ROMANIAN" value="2" />
        <entry key="SWEDISH" value="4" />
        <entry key="TELUGU" value="1" />
        <entry key="TURKISH" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="HINDI" value="2" />
      </map>
    </option>
  </component>
</application>